package endpoints

import (
	"../config"
	"../models"

	"database/sql"
	"encoding/json"
	"net/http"
	"strconv"

	"github.com/gorilla/mux"
)

// RegisterPageHandlers attaches the closures generated by each function defined below
// to handle incoming requests to the appropriate endpoint using a subrouter with an
// appropriate prefix, specified in main.
func RegisterPageHandlers(r *mux.Router, db *sql.DB, cfg *config.Config) {
	r.HandleFunc("/", listPages(db, cfg)).Methods("GET")
	r.HandleFunc("/", createPage(db, cfg)).Methods("POST")
	r.HandleFunc("/{pageId}", deletePage(db, cfg)).Methods("DELETE")
}

// GET /projects/{projectId}/releases/{releaseId}/pages

type getPagesRequest struct {
	ProjectID int
	ReleaseID int
}

type getPagesResponse struct {
	Error *string       `json:"error"`
	Pages []models.Page `json:"pages"`
}

// listPages lists descriptive information about
func listPages(db *sql.DB, cfg *config.Config) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		request := getPagesRequest{}
		vars := mux.Vars(r)
		pid := vars["projectId"]
		rid := vars["releaseId"]
		projectId, parseErr1 := strconv.Atoi(pid)
		releaseId, parseErr2 := strconv.Atoi(rid)

		encoder := json.NewEncoder(w)
		if parseErr1 != nil || parseErr2 != nil {
			w.WriteHeader(http.StatusBadRequest)
			errMsg := "projectId and releaseId must be integer IDs."
			encoder.Encode(getPagesResponse{&errMsg, []models.Page{}})
			return
		}
		request.ProjectID = projectId
		request.ReleaseID = releaseId
		// TODO - Fetch the list of pages from the DB.
		encoder.Encode(getPagesResponse{nil, []models.Page{}})
	}
}

// POST /projects/{projectId}/releases/{releaseId}/pages

type createPageRequest struct {
	ProjectID int    // Pulled from the URL parameters
	ReleaseID int    // Pulled from the URL parameters
	Number    string `json:"page"`
	ImageData string `json:"data"`
}

type createPageResponse struct {
	Error   *string `json:"error"`
	Success bool    `json:"success"`
	ID      int     `json:"id"`
}

// createPage inserts a new page into the DB and saves page data to a file.
func createPage(db *sql.DB, cfg *config.Config) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		request := createPageRequest{}
		vars := mux.Vars(r)
		pid := vars["projectId"]
		rid := vars["releaseId"]
		projectId, parseErr1 := strconv.Atoi(pid)
		releaseId, parseErr2 := strconv.Atoi(rid)
		decoder := json.NewDecoder(r.Body)
		defer r.Body.Close()
		decodeErr := decoder.Decode(&request)

		encoder := json.NewEncoder(w)
		if parseErr1 != nil || parseErr2 != nil {
			w.WriteHeader(http.StatusBadRequest)
			errMsg := "projectId and releaseId must be integer IDs."
			encoder.Encode(createPageResponse{&errMsg, false, 0})
			return
		}
		request.ProjectID = projectId
		request.ReleaseID = releaseId
		if decodeErr != nil {
			w.WriteHeader(http.StatusBadRequest)
			errMsg := "JSON format error or missing field detected."
			encoder.Encode(createPageResponse{&errMsg, false, 0})
			return
		}
		// TODO - Upload the page to the DB and save the data to a file.
		encoder.Encode(createPageResponse{nil, true, 1})
	}
}

// DELETE /projects/{projectId}/releases/{releaseId}/pages/{pageId}

type deletePageRequest struct {
	ProjectID int
	ReleaseID int
	PageID    int
}

type deletePageResponse struct {
	Error   *string `json:"error"`
	Success bool    `json:"success"`
}

// deletePage removes a page from the DB and deletes the file containing the image.
func deletePage(db *sql.DB, cfg *config.Config) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		request := deletePageRequest{}
		vars := mux.Vars(r)
		prid := vars["projectId"]
		reid := vars["releaseId"]
		paid := vars["pageId"]
		projectId, parseErr1 := strconv.Atoi(prid)
		releaseId, parseErr2 := strconv.Atoi(reid)
		pageId, parseErr3 := strconv.Atoi(paid)

		encoder := json.NewEncoder(w)
		if parseErr1 != nil || parseErr2 != nil || parseErr3 != nil {
			w.WriteHeader(http.StatusBadRequest)
			errMsg := "projectId, releaseId, and pageId must all be integer IDs."
			encoder.Encode(deletePageResponse{&errMsg, false})
			return
		}
		request.ProjectID = projectId
		request.ReleaseID = releaseId
		request.PageID = pageId
		// TODO - Delete the page from the DB and the file from disk.
		encoder.Encode(deletePageResponse{nil, true})
	}
}
